
TMU_May.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000200e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000200e  000020a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  0080017c  0080017c  000021be  2**0
                  ALLOC
  3 .stab         000016ec  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2e  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000044da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  0000463a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d90  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001016  00000000  00000000  0000657f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f2e  00000000  00000000  00007595  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000084c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b9  00000000  00000000  00008644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000872  00000000  00000000  000088fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000916f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_10>
      2c:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <main>
      8a:	0c 94 05 10 	jmp	0x200a	; 0x200a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x18>

000006f2 <__fixsfsi>:
     6f2:	ac e0       	ldi	r26, 0x0C	; 12
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__+0x20>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	be 01       	movw	r22, r28
     70c:	6b 5f       	subi	r22, 0xFB	; 251
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	61 f1       	breq	.+88     	; 0x772 <__fixsfsi+0x80>
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	50 f1       	brcs	.+84     	; 0x772 <__fixsfsi+0x80>
     71e:	84 30       	cpi	r24, 0x04	; 4
     720:	21 f4       	brne	.+8      	; 0x72a <__fixsfsi+0x38>
     722:	8e 81       	ldd	r24, Y+6	; 0x06
     724:	88 23       	and	r24, r24
     726:	51 f1       	breq	.+84     	; 0x77c <__fixsfsi+0x8a>
     728:	2e c0       	rjmp	.+92     	; 0x786 <__fixsfsi+0x94>
     72a:	2f 81       	ldd	r18, Y+7	; 0x07
     72c:	38 85       	ldd	r19, Y+8	; 0x08
     72e:	37 fd       	sbrc	r19, 7
     730:	20 c0       	rjmp	.+64     	; 0x772 <__fixsfsi+0x80>
     732:	6e 81       	ldd	r22, Y+6	; 0x06
     734:	2f 31       	cpi	r18, 0x1F	; 31
     736:	31 05       	cpc	r19, r1
     738:	1c f0       	brlt	.+6      	; 0x740 <__fixsfsi+0x4e>
     73a:	66 23       	and	r22, r22
     73c:	f9 f0       	breq	.+62     	; 0x77c <__fixsfsi+0x8a>
     73e:	23 c0       	rjmp	.+70     	; 0x786 <__fixsfsi+0x94>
     740:	8e e1       	ldi	r24, 0x1E	; 30
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	82 1b       	sub	r24, r18
     746:	93 0b       	sbc	r25, r19
     748:	29 85       	ldd	r18, Y+9	; 0x09
     74a:	3a 85       	ldd	r19, Y+10	; 0x0a
     74c:	4b 85       	ldd	r20, Y+11	; 0x0b
     74e:	5c 85       	ldd	r21, Y+12	; 0x0c
     750:	04 c0       	rjmp	.+8      	; 0x75a <__fixsfsi+0x68>
     752:	56 95       	lsr	r21
     754:	47 95       	ror	r20
     756:	37 95       	ror	r19
     758:	27 95       	ror	r18
     75a:	8a 95       	dec	r24
     75c:	d2 f7       	brpl	.-12     	; 0x752 <__fixsfsi+0x60>
     75e:	66 23       	and	r22, r22
     760:	b1 f0       	breq	.+44     	; 0x78e <__fixsfsi+0x9c>
     762:	50 95       	com	r21
     764:	40 95       	com	r20
     766:	30 95       	com	r19
     768:	21 95       	neg	r18
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	4f 4f       	sbci	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	0e c0       	rjmp	.+28     	; 0x78e <__fixsfsi+0x9c>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	09 c0       	rjmp	.+18     	; 0x78e <__fixsfsi+0x9c>
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	4f ef       	ldi	r20, 0xFF	; 255
     782:	5f e7       	ldi	r21, 0x7F	; 127
     784:	04 c0       	rjmp	.+8      	; 0x78e <__fixsfsi+0x9c>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e8       	ldi	r21, 0x80	; 128
     78e:	b9 01       	movw	r22, r18
     790:	ca 01       	movw	r24, r20
     792:	2c 96       	adiw	r28, 0x0c	; 12
     794:	e2 e0       	ldi	r30, 0x02	; 2
     796:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__+0x20>

0000079a <__floatunsisf>:
     79a:	a8 e0       	ldi	r26, 0x08	; 8
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e3 ed       	ldi	r30, 0xD3	; 211
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x10>
     7a6:	7b 01       	movw	r14, r22
     7a8:	8c 01       	movw	r16, r24
     7aa:	61 15       	cp	r22, r1
     7ac:	71 05       	cpc	r23, r1
     7ae:	81 05       	cpc	r24, r1
     7b0:	91 05       	cpc	r25, r1
     7b2:	19 f4       	brne	.+6      	; 0x7ba <__floatunsisf+0x20>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	60 c0       	rjmp	.+192    	; 0x87a <__stack+0x1b>
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	8e e1       	ldi	r24, 0x1E	; 30
     7c0:	c8 2e       	mov	r12, r24
     7c2:	d1 2c       	mov	r13, r1
     7c4:	dc 82       	std	Y+4, r13	; 0x04
     7c6:	cb 82       	std	Y+3, r12	; 0x03
     7c8:	ed 82       	std	Y+5, r14	; 0x05
     7ca:	fe 82       	std	Y+6, r15	; 0x06
     7cc:	0f 83       	std	Y+7, r16	; 0x07
     7ce:	18 87       	std	Y+8, r17	; 0x08
     7d0:	c8 01       	movw	r24, r16
     7d2:	b7 01       	movw	r22, r14
     7d4:	0e 94 46 04 	call	0x88c	; 0x88c <__clzsi2>
     7d8:	fc 01       	movw	r30, r24
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	f7 ff       	sbrs	r31, 7
     7de:	3b c0       	rjmp	.+118    	; 0x856 <__floatunsisf+0xbc>
     7e0:	22 27       	eor	r18, r18
     7e2:	33 27       	eor	r19, r19
     7e4:	2e 1b       	sub	r18, r30
     7e6:	3f 0b       	sbc	r19, r31
     7e8:	57 01       	movw	r10, r14
     7ea:	68 01       	movw	r12, r16
     7ec:	02 2e       	mov	r0, r18
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__floatunsisf+0x5e>
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	b7 94       	ror	r11
     7f6:	a7 94       	ror	r10
     7f8:	0a 94       	dec	r0
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__floatunsisf+0x56>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	04 c0       	rjmp	.+8      	; 0x816 <__floatunsisf+0x7c>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	2a 95       	dec	r18
     818:	d2 f7       	brpl	.-12     	; 0x80e <__floatunsisf+0x74>
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	a1 09       	sbc	r26, r1
     81e:	b1 09       	sbc	r27, r1
     820:	8e 21       	and	r24, r14
     822:	9f 21       	and	r25, r15
     824:	a0 23       	and	r26, r16
     826:	b1 23       	and	r27, r17
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	a1 05       	cpc	r26, r1
     82c:	b1 05       	cpc	r27, r1
     82e:	21 f0       	breq	.+8      	; 0x838 <__floatunsisf+0x9e>
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	4a 29       	or	r20, r10
     83a:	5b 29       	or	r21, r11
     83c:	6c 29       	or	r22, r12
     83e:	7d 29       	or	r23, r13
     840:	4d 83       	std	Y+5, r20	; 0x05
     842:	5e 83       	std	Y+6, r21	; 0x06
     844:	6f 83       	std	Y+7, r22	; 0x07
     846:	78 87       	std	Y+8, r23	; 0x08
     848:	8e e1       	ldi	r24, 0x1E	; 30
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	8e 1b       	sub	r24, r30
     84e:	9f 0b       	sbc	r25, r31
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	12 c0       	rjmp	.+36     	; 0x87a <__stack+0x1b>
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	81 f0       	breq	.+32     	; 0x87a <__stack+0x1b>
     85a:	0e 2e       	mov	r0, r30
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	ee 0c       	add	r14, r14
     860:	ff 1c       	adc	r15, r15
     862:	00 1f       	adc	r16, r16
     864:	11 1f       	adc	r17, r17
     866:	0a 94       	dec	r0
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0xc4>
     86a:	ed 82       	std	Y+5, r14	; 0x05
     86c:	fe 82       	std	Y+6, r15	; 0x06
     86e:	0f 83       	std	Y+7, r16	; 0x07
     870:	18 87       	std	Y+8, r17	; 0x08
     872:	ce 1a       	sub	r12, r30
     874:	df 0a       	sbc	r13, r31
     876:	dc 82       	std	Y+4, r13	; 0x04
     878:	cb 82       	std	Y+3, r12	; 0x03
     87a:	1a 82       	std	Y+2, r1	; 0x02
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     884:	28 96       	adiw	r28, 0x08	; 8
     886:	ea e0       	ldi	r30, 0x0A	; 10
     888:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x10>

0000088c <__clzsi2>:
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	7b 01       	movw	r14, r22
     896:	8c 01       	movw	r16, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	e8 16       	cp	r14, r24
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	f8 06       	cpc	r15, r24
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	08 07       	cpc	r16, r24
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	18 07       	cpc	r17, r24
     8a8:	88 f4       	brcc	.+34     	; 0x8cc <__clzsi2+0x40>
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	e8 16       	cp	r14, r24
     8ae:	f1 04       	cpc	r15, r1
     8b0:	01 05       	cpc	r16, r1
     8b2:	11 05       	cpc	r17, r1
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <__clzsi2+0x36>
     8b6:	28 f0       	brcs	.+10     	; 0x8c2 <__clzsi2+0x36>
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <__clzsi2+0x64>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <__clzsi2+0x64>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	e8 16       	cp	r14, r24
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	f8 06       	cpc	r15, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 07       	cpc	r16, r24
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	18 07       	cpc	r17, r24
     8dc:	28 f0       	brcs	.+10     	; 0x8e8 <__clzsi2+0x5c>
     8de:	88 e1       	ldi	r24, 0x18	; 24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__clzsi2+0x64>
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e0       	ldi	r26, 0x00	; 0
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	20 e2       	ldi	r18, 0x20	; 32
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	28 1b       	sub	r18, r24
     8fa:	39 0b       	sbc	r19, r25
     8fc:	4a 0b       	sbc	r20, r26
     8fe:	5b 0b       	sbc	r21, r27
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x7e>
     902:	16 95       	lsr	r17
     904:	07 95       	ror	r16
     906:	f7 94       	ror	r15
     908:	e7 94       	ror	r14
     90a:	8a 95       	dec	r24
     90c:	d2 f7       	brpl	.-12     	; 0x902 <__clzsi2+0x76>
     90e:	f7 01       	movw	r30, r14
     910:	e2 59       	subi	r30, 0x92	; 146
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	80 81       	ld	r24, Z
     916:	28 1b       	sub	r18, r24
     918:	31 09       	sbc	r19, r1
     91a:	41 09       	sbc	r20, r1
     91c:	51 09       	sbc	r21, r1
     91e:	c9 01       	movw	r24, r18
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <__pack_f>:
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	fc 01       	movw	r30, r24
     936:	e4 80       	ldd	r14, Z+4	; 0x04
     938:	f5 80       	ldd	r15, Z+5	; 0x05
     93a:	06 81       	ldd	r16, Z+6	; 0x06
     93c:	17 81       	ldd	r17, Z+7	; 0x07
     93e:	d1 80       	ldd	r13, Z+1	; 0x01
     940:	80 81       	ld	r24, Z
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	48 f4       	brcc	.+18     	; 0x958 <__pack_f+0x2e>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e1       	ldi	r26, 0x10	; 16
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e8 2a       	or	r14, r24
     950:	f9 2a       	or	r15, r25
     952:	0a 2b       	or	r16, r26
     954:	1b 2b       	or	r17, r27
     956:	a5 c0       	rjmp	.+330    	; 0xaa2 <__pack_f+0x178>
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	09 f4       	brne	.+2      	; 0x95e <__pack_f+0x34>
     95c:	9f c0       	rjmp	.+318    	; 0xa9c <__pack_f+0x172>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	21 f4       	brne	.+8      	; 0x96a <__pack_f+0x40>
     962:	ee 24       	eor	r14, r14
     964:	ff 24       	eor	r15, r15
     966:	87 01       	movw	r16, r14
     968:	05 c0       	rjmp	.+10     	; 0x974 <__pack_f+0x4a>
     96a:	e1 14       	cp	r14, r1
     96c:	f1 04       	cpc	r15, r1
     96e:	01 05       	cpc	r16, r1
     970:	11 05       	cpc	r17, r1
     972:	19 f4       	brne	.+6      	; 0x97a <__pack_f+0x50>
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	96 c0       	rjmp	.+300    	; 0xaa6 <__pack_f+0x17c>
     97a:	62 81       	ldd	r22, Z+2	; 0x02
     97c:	73 81       	ldd	r23, Z+3	; 0x03
     97e:	9f ef       	ldi	r25, 0xFF	; 255
     980:	62 38       	cpi	r22, 0x82	; 130
     982:	79 07       	cpc	r23, r25
     984:	0c f0       	brlt	.+2      	; 0x988 <__pack_f+0x5e>
     986:	5b c0       	rjmp	.+182    	; 0xa3e <__pack_f+0x114>
     988:	22 e8       	ldi	r18, 0x82	; 130
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	26 1b       	sub	r18, r22
     98e:	37 0b       	sbc	r19, r23
     990:	2a 31       	cpi	r18, 0x1A	; 26
     992:	31 05       	cpc	r19, r1
     994:	2c f0       	brlt	.+10     	; 0x9a0 <__pack_f+0x76>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	2a c0       	rjmp	.+84     	; 0x9f4 <__pack_f+0xca>
     9a0:	b8 01       	movw	r22, r16
     9a2:	a7 01       	movw	r20, r14
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__pack_f+0x86>
     9a8:	76 95       	lsr	r23
     9aa:	67 95       	ror	r22
     9ac:	57 95       	ror	r21
     9ae:	47 95       	ror	r20
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__pack_f+0x7e>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__pack_f+0x9c>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	aa 1f       	adc	r26, r26
     9c4:	bb 1f       	adc	r27, r27
     9c6:	2a 95       	dec	r18
     9c8:	d2 f7       	brpl	.-12     	; 0x9be <__pack_f+0x94>
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	a1 09       	sbc	r26, r1
     9ce:	b1 09       	sbc	r27, r1
     9d0:	8e 21       	and	r24, r14
     9d2:	9f 21       	and	r25, r15
     9d4:	a0 23       	and	r26, r16
     9d6:	b1 23       	and	r27, r17
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	a1 05       	cpc	r26, r1
     9dc:	b1 05       	cpc	r27, r1
     9de:	21 f0       	breq	.+8      	; 0x9e8 <__pack_f+0xbe>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	9a 01       	movw	r18, r20
     9ea:	ab 01       	movw	r20, r22
     9ec:	28 2b       	or	r18, r24
     9ee:	39 2b       	or	r19, r25
     9f0:	4a 2b       	or	r20, r26
     9f2:	5b 2b       	or	r21, r27
     9f4:	da 01       	movw	r26, r20
     9f6:	c9 01       	movw	r24, r18
     9f8:	8f 77       	andi	r24, 0x7F	; 127
     9fa:	90 70       	andi	r25, 0x00	; 0
     9fc:	a0 70       	andi	r26, 0x00	; 0
     9fe:	b0 70       	andi	r27, 0x00	; 0
     a00:	80 34       	cpi	r24, 0x40	; 64
     a02:	91 05       	cpc	r25, r1
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	39 f4       	brne	.+14     	; 0xa18 <__pack_f+0xee>
     a0a:	27 ff       	sbrs	r18, 7
     a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__pack_f+0xf6>
     a0e:	20 5c       	subi	r18, 0xC0	; 192
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	4f 4f       	sbci	r20, 0xFF	; 255
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__pack_f+0xf6>
     a18:	21 5c       	subi	r18, 0xC1	; 193
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	4f 4f       	sbci	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	e0 e0       	ldi	r30, 0x00	; 0
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	3a 07       	cpc	r19, r26
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	4a 07       	cpc	r20, r26
     a2e:	a0 e4       	ldi	r26, 0x40	; 64
     a30:	5a 07       	cpc	r21, r26
     a32:	10 f0       	brcs	.+4      	; 0xa38 <__pack_f+0x10e>
     a34:	e1 e0       	ldi	r30, 0x01	; 1
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	79 01       	movw	r14, r18
     a3a:	8a 01       	movw	r16, r20
     a3c:	27 c0       	rjmp	.+78     	; 0xa8c <__pack_f+0x162>
     a3e:	60 38       	cpi	r22, 0x80	; 128
     a40:	71 05       	cpc	r23, r1
     a42:	64 f5       	brge	.+88     	; 0xa9c <__pack_f+0x172>
     a44:	fb 01       	movw	r30, r22
     a46:	e1 58       	subi	r30, 0x81	; 129
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	d8 01       	movw	r26, r16
     a4c:	c7 01       	movw	r24, r14
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	90 70       	andi	r25, 0x00	; 0
     a52:	a0 70       	andi	r26, 0x00	; 0
     a54:	b0 70       	andi	r27, 0x00	; 0
     a56:	80 34       	cpi	r24, 0x40	; 64
     a58:	91 05       	cpc	r25, r1
     a5a:	a1 05       	cpc	r26, r1
     a5c:	b1 05       	cpc	r27, r1
     a5e:	39 f4       	brne	.+14     	; 0xa6e <__pack_f+0x144>
     a60:	e7 fe       	sbrs	r14, 7
     a62:	0d c0       	rjmp	.+26     	; 0xa7e <__pack_f+0x154>
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__pack_f+0x14c>
     a6e:	8f e3       	ldi	r24, 0x3F	; 63
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e8 0e       	add	r14, r24
     a78:	f9 1e       	adc	r15, r25
     a7a:	0a 1f       	adc	r16, r26
     a7c:	1b 1f       	adc	r17, r27
     a7e:	17 ff       	sbrs	r17, 7
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <__pack_f+0x162>
     a82:	16 95       	lsr	r17
     a84:	07 95       	ror	r16
     a86:	f7 94       	ror	r15
     a88:	e7 94       	ror	r14
     a8a:	31 96       	adiw	r30, 0x01	; 1
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	16 95       	lsr	r17
     a90:	07 95       	ror	r16
     a92:	f7 94       	ror	r15
     a94:	e7 94       	ror	r14
     a96:	8a 95       	dec	r24
     a98:	d1 f7       	brne	.-12     	; 0xa8e <__pack_f+0x164>
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x17c>
     a9c:	ee 24       	eor	r14, r14
     a9e:	ff 24       	eor	r15, r15
     aa0:	87 01       	movw	r16, r14
     aa2:	ef ef       	ldi	r30, 0xFF	; 255
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	6e 2f       	mov	r22, r30
     aa8:	67 95       	ror	r22
     aaa:	66 27       	eor	r22, r22
     aac:	67 95       	ror	r22
     aae:	90 2f       	mov	r25, r16
     ab0:	9f 77       	andi	r25, 0x7F	; 127
     ab2:	d7 94       	ror	r13
     ab4:	dd 24       	eor	r13, r13
     ab6:	d7 94       	ror	r13
     ab8:	8e 2f       	mov	r24, r30
     aba:	86 95       	lsr	r24
     abc:	49 2f       	mov	r20, r25
     abe:	46 2b       	or	r20, r22
     ac0:	58 2f       	mov	r21, r24
     ac2:	5d 29       	or	r21, r13
     ac4:	b7 01       	movw	r22, r14
     ac6:	ca 01       	movw	r24, r20
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	08 95       	ret

00000ad4 <__unpack_f>:
     ad4:	fc 01       	movw	r30, r24
     ad6:	db 01       	movw	r26, r22
     ad8:	40 81       	ld	r20, Z
     ada:	51 81       	ldd	r21, Z+1	; 0x01
     adc:	22 81       	ldd	r18, Z+2	; 0x02
     ade:	62 2f       	mov	r22, r18
     ae0:	6f 77       	andi	r22, 0x7F	; 127
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	22 1f       	adc	r18, r18
     ae6:	22 27       	eor	r18, r18
     ae8:	22 1f       	adc	r18, r18
     aea:	93 81       	ldd	r25, Z+3	; 0x03
     aec:	89 2f       	mov	r24, r25
     aee:	88 0f       	add	r24, r24
     af0:	82 2b       	or	r24, r18
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	99 1f       	adc	r25, r25
     af8:	99 27       	eor	r25, r25
     afa:	99 1f       	adc	r25, r25
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	9c 93       	st	X, r25
     b00:	11 97       	sbiw	r26, 0x01	; 1
     b02:	21 15       	cp	r18, r1
     b04:	31 05       	cpc	r19, r1
     b06:	a9 f5       	brne	.+106    	; 0xb72 <__unpack_f+0x9e>
     b08:	41 15       	cp	r20, r1
     b0a:	51 05       	cpc	r21, r1
     b0c:	61 05       	cpc	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	11 f4       	brne	.+4      	; 0xb16 <__unpack_f+0x42>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	37 c0       	rjmp	.+110    	; 0xb84 <__unpack_f+0xb0>
     b16:	82 e8       	ldi	r24, 0x82	; 130
     b18:	9f ef       	ldi	r25, 0xFF	; 255
     b1a:	13 96       	adiw	r26, 0x03	; 3
     b1c:	9c 93       	st	X, r25
     b1e:	8e 93       	st	-X, r24
     b20:	12 97       	sbiw	r26, 0x02	; 2
     b22:	9a 01       	movw	r18, r20
     b24:	ab 01       	movw	r20, r22
     b26:	67 e0       	ldi	r22, 0x07	; 7
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	44 1f       	adc	r20, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	6a 95       	dec	r22
     b32:	d1 f7       	brne	.-12     	; 0xb28 <__unpack_f+0x54>
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	8c 93       	st	X, r24
     b38:	0d c0       	rjmp	.+26     	; 0xb54 <__unpack_f+0x80>
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	44 1f       	adc	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	12 96       	adiw	r26, 0x02	; 2
     b44:	8d 91       	ld	r24, X+
     b46:	9c 91       	ld	r25, X
     b48:	13 97       	sbiw	r26, 0x03	; 3
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	13 96       	adiw	r26, 0x03	; 3
     b4e:	9c 93       	st	X, r25
     b50:	8e 93       	st	-X, r24
     b52:	12 97       	sbiw	r26, 0x02	; 2
     b54:	20 30       	cpi	r18, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	38 07       	cpc	r19, r24
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	48 07       	cpc	r20, r24
     b5e:	80 e4       	ldi	r24, 0x40	; 64
     b60:	58 07       	cpc	r21, r24
     b62:	58 f3       	brcs	.-42     	; 0xb3a <__unpack_f+0x66>
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	2d 93       	st	X+, r18
     b68:	3d 93       	st	X+, r19
     b6a:	4d 93       	st	X+, r20
     b6c:	5c 93       	st	X, r21
     b6e:	17 97       	sbiw	r26, 0x07	; 7
     b70:	08 95       	ret
     b72:	2f 3f       	cpi	r18, 0xFF	; 255
     b74:	31 05       	cpc	r19, r1
     b76:	79 f4       	brne	.+30     	; 0xb96 <__unpack_f+0xc2>
     b78:	41 15       	cp	r20, r1
     b7a:	51 05       	cpc	r21, r1
     b7c:	61 05       	cpc	r22, r1
     b7e:	71 05       	cpc	r23, r1
     b80:	19 f4       	brne	.+6      	; 0xb88 <__unpack_f+0xb4>
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
     b86:	08 95       	ret
     b88:	64 ff       	sbrs	r22, 4
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <__unpack_f+0xbe>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8c 93       	st	X, r24
     b90:	12 c0       	rjmp	.+36     	; 0xbb6 <__unpack_f+0xe2>
     b92:	1c 92       	st	X, r1
     b94:	10 c0       	rjmp	.+32     	; 0xbb6 <__unpack_f+0xe2>
     b96:	2f 57       	subi	r18, 0x7F	; 127
     b98:	30 40       	sbci	r19, 0x00	; 0
     b9a:	13 96       	adiw	r26, 0x03	; 3
     b9c:	3c 93       	st	X, r19
     b9e:	2e 93       	st	-X, r18
     ba0:	12 97       	sbiw	r26, 0x02	; 2
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	8c 93       	st	X, r24
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	44 0f       	add	r20, r20
     baa:	55 1f       	adc	r21, r21
     bac:	66 1f       	adc	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	8a 95       	dec	r24
     bb2:	d1 f7       	brne	.-12     	; 0xba8 <__unpack_f+0xd4>
     bb4:	70 64       	ori	r23, 0x40	; 64
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	4d 93       	st	X+, r20
     bba:	5d 93       	st	X+, r21
     bbc:	6d 93       	st	X+, r22
     bbe:	7c 93       	st	X, r23
     bc0:	17 97       	sbiw	r26, 0x07	; 7
     bc2:	08 95       	ret

00000bc4 <__fpcmp_parts_f>:
     bc4:	1f 93       	push	r17
     bc6:	dc 01       	movw	r26, r24
     bc8:	fb 01       	movw	r30, r22
     bca:	9c 91       	ld	r25, X
     bcc:	92 30       	cpi	r25, 0x02	; 2
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <__fpcmp_parts_f+0xe>
     bd0:	47 c0       	rjmp	.+142    	; 0xc60 <__fpcmp_parts_f+0x9c>
     bd2:	80 81       	ld	r24, Z
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	08 f4       	brcc	.+2      	; 0xbda <__fpcmp_parts_f+0x16>
     bd8:	43 c0       	rjmp	.+134    	; 0xc60 <__fpcmp_parts_f+0x9c>
     bda:	94 30       	cpi	r25, 0x04	; 4
     bdc:	51 f4       	brne	.+20     	; 0xbf2 <__fpcmp_parts_f+0x2e>
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	1c 91       	ld	r17, X
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	99 f5       	brne	.+102    	; 0xc4c <__fpcmp_parts_f+0x88>
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	68 2f       	mov	r22, r24
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	61 1b       	sub	r22, r17
     bee:	71 09       	sbc	r23, r1
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <__fpcmp_parts_f+0xac>
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	21 f0       	breq	.+8      	; 0xbfe <__fpcmp_parts_f+0x3a>
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	31 f4       	brne	.+12     	; 0xc06 <__fpcmp_parts_f+0x42>
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	b9 f1       	breq	.+110    	; 0xc6c <__fpcmp_parts_f+0xa8>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	88 23       	and	r24, r24
     c02:	89 f1       	breq	.+98     	; 0xc66 <__fpcmp_parts_f+0xa2>
     c04:	2d c0       	rjmp	.+90     	; 0xc60 <__fpcmp_parts_f+0x9c>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	f1 f0       	breq	.+60     	; 0xc4c <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	18 17       	cp	r17, r24
     c14:	d9 f4       	brne	.+54     	; 0xc4c <__fpcmp_parts_f+0x88>
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	2d 91       	ld	r18, X+
     c1a:	3c 91       	ld	r19, X
     c1c:	13 97       	sbiw	r26, 0x03	; 3
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	94 f0       	brlt	.+36     	; 0xc4c <__fpcmp_parts_f+0x88>
     c28:	28 17       	cp	r18, r24
     c2a:	39 07       	cpc	r19, r25
     c2c:	bc f0       	brlt	.+46     	; 0xc5c <__fpcmp_parts_f+0x98>
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	8d 91       	ld	r24, X+
     c32:	9d 91       	ld	r25, X+
     c34:	0d 90       	ld	r0, X+
     c36:	bc 91       	ld	r27, X
     c38:	a0 2d       	mov	r26, r0
     c3a:	24 81       	ldd	r18, Z+4	; 0x04
     c3c:	35 81       	ldd	r19, Z+5	; 0x05
     c3e:	46 81       	ldd	r20, Z+6	; 0x06
     c40:	57 81       	ldd	r21, Z+7	; 0x07
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	4a 07       	cpc	r20, r26
     c48:	5b 07       	cpc	r21, r27
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <__fpcmp_parts_f+0x8e>
     c4c:	11 23       	and	r17, r17
     c4e:	41 f0       	breq	.+16     	; 0xc60 <__fpcmp_parts_f+0x9c>
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <__fpcmp_parts_f+0xa2>
     c52:	82 17       	cp	r24, r18
     c54:	93 07       	cpc	r25, r19
     c56:	a4 07       	cpc	r26, r20
     c58:	b5 07       	cpc	r27, r21
     c5a:	40 f4       	brcc	.+16     	; 0xc6c <__fpcmp_parts_f+0xa8>
     c5c:	11 23       	and	r17, r17
     c5e:	19 f0       	breq	.+6      	; 0xc66 <__fpcmp_parts_f+0xa2>
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__fpcmp_parts_f+0xac>
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	7f ef       	ldi	r23, 0xFF	; 255
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <__fpcmp_parts_f+0xac>
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	cb 01       	movw	r24, r22
     c72:	1f 91       	pop	r17
     c74:	08 95       	ret

00000c76 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	0f 92       	push	r0
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     c80:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA7_DIR,PA6_DIR,PA5_DIR,PA4_DIR,PA3_DIR,PA2_DIR,PA1_DIR,PA0_DIR);
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	85 e7       	ldi	r24, 0x75	; 117
     c88:	80 83       	st	Z, r24

	PORTA = CONC(PA7_INIT_VAL,PA6_INIT_VAL,PA5_INIT_VAL,PA4_INIT_VAL,PA3_INIT_VAL,PA2_INIT_VAL,PA1_INIT_VAL,PA0_INIT_VAL);
     c8a:	eb e3       	ldi	r30, 0x3B	; 59
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	89 ed       	ldi	r24, 0xD9	; 217
     c90:	80 83       	st	Z, r24

#elif PA0_DIR == DIO_u8OUTPUT

#endif
*/
	return Local_enuErrorState;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
}
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Direction)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <DIO_enuSetPinDirection+0x6>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_enuSetPinDirection+0x8>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_enuSetPinDirection+0xa>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	6b 83       	std	Y+3, r22	; 0x03
     cae:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     cb0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	08 f0       	brcs	.+2      	; 0xcba <DIO_enuSetPinDirection+0x1e>
     cb8:	d1 c0       	rjmp	.+418    	; 0xe5c <DIO_enuSetPinDirection+0x1c0>
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <DIO_enuSetPinDirection+0x26>
     cc0:	cd c0       	rjmp	.+410    	; 0xe5c <DIO_enuSetPinDirection+0x1c0>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	08 f0       	brcs	.+2      	; 0xcca <DIO_enuSetPinDirection+0x2e>
     cc8:	c9 c0       	rjmp	.+402    	; 0xe5c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3e 83       	std	Y+6, r19	; 0x06
     cd2:	2d 83       	std	Y+5, r18	; 0x05
     cd4:	6d 81       	ldd	r22, Y+5	; 0x05
     cd6:	7e 81       	ldd	r23, Y+6	; 0x06
     cd8:	61 30       	cpi	r22, 0x01	; 1
     cda:	71 05       	cpc	r23, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <DIO_enuSetPinDirection+0x44>
     cde:	41 c0       	rjmp	.+130    	; 0xd62 <DIO_enuSetPinDirection+0xc6>
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	91 05       	cpc	r25, r1
     ce8:	34 f4       	brge	.+12     	; 0xcf6 <DIO_enuSetPinDirection+0x5a>
     cea:	2d 81       	ldd	r18, Y+5	; 0x05
     cec:	3e 81       	ldd	r19, Y+6	; 0x06
     cee:	21 15       	cp	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	71 f0       	breq	.+28     	; 0xd10 <DIO_enuSetPinDirection+0x74>
     cf4:	b0 c0       	rjmp	.+352    	; 0xe56 <DIO_enuSetPinDirection+0x1ba>
     cf6:	6d 81       	ldd	r22, Y+5	; 0x05
     cf8:	7e 81       	ldd	r23, Y+6	; 0x06
     cfa:	62 30       	cpi	r22, 0x02	; 2
     cfc:	71 05       	cpc	r23, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <DIO_enuSetPinDirection+0x66>
     d00:	59 c0       	rjmp	.+178    	; 0xdb4 <DIO_enuSetPinDirection+0x118>
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <DIO_enuSetPinDirection+0x72>
     d0c:	7c c0       	rjmp	.+248    	; 0xe06 <DIO_enuSetPinDirection+0x16a>
     d0e:	a3 c0       	rjmp	.+326    	; 0xe56 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     d10:	aa e3       	ldi	r26, 0x3A	; 58
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e3       	ldi	r30, 0x3A	; 58
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_enuSetPinDirection+0x90>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	2a 95       	dec	r18
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_enuSetPinDirection+0x8c>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction<<Copy_u8PinID);
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	b9 01       	movw	r22, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_enuSetPinDirection+0xba>
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	8a 95       	dec	r24
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_enuSetPinDirection+0xb6>
     d5a:	cb 01       	movw	r24, r22
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	7a c0       	rjmp	.+244    	; 0xe56 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_enuSetPinDirection+0xe2>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	2a 95       	dec	r18
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_enuSetPinDirection+0xde>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction<<Copy_u8PinID);
     d88:	a7 e3       	ldi	r26, 0x37	; 55
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e7 e3       	ldi	r30, 0x37	; 55
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	b9 01       	movw	r22, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_enuSetPinDirection+0x10c>
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	8a 95       	dec	r24
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_enuSetPinDirection+0x108>
     dac:	cb 01       	movw	r24, r22
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	51 c0       	rjmp	.+162    	; 0xe56 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     db4:	a4 e3       	ldi	r26, 0x34	; 52
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e4 e3       	ldi	r30, 0x34	; 52
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_enuSetPinDirection+0x134>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	2a 95       	dec	r18
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_enuSetPinDirection+0x130>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction<<Copy_u8PinID);
     dda:	a4 e3       	ldi	r26, 0x34	; 52
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e4 e3       	ldi	r30, 0x34	; 52
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8c 81       	ldd	r24, Y+4	; 0x04
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	b9 01       	movw	r22, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_enuSetPinDirection+0x15e>
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	8a 95       	dec	r24
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_enuSetPinDirection+0x15a>
     dfe:	cb 01       	movw	r24, r22
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	28 c0       	rjmp	.+80     	; 0xe56 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_enuSetPinDirection+0x186>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	2a 95       	dec	r18
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_enuSetPinDirection+0x182>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction<<Copy_u8PinID);
     e2c:	a1 e3       	ldi	r26, 0x31	; 49
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e1 e3       	ldi	r30, 0x31	; 49
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b9 01       	movw	r22, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_enuSetPinDirection+0x1b0>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_enuSetPinDirection+0x1ac>
     e50:	cb 01       	movw	r24, r22
     e52:	84 2b       	or	r24, r20
     e54:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
}
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <DIO_enuSetPinValue+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_enuSetPinValue+0x8>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_enuSetPinValue+0xa>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	6b 83       	std	Y+3, r22	; 0x03
     e86:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e88:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <DIO_enuSetPinValue+0x1e>
     e90:	d1 c0       	rjmp	.+418    	; 0x1034 <DIO_enuSetPinValue+0x1c0>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	08 f0       	brcs	.+2      	; 0xe9a <DIO_enuSetPinValue+0x26>
     e98:	cd c0       	rjmp	.+410    	; 0x1034 <DIO_enuSetPinValue+0x1c0>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <DIO_enuSetPinValue+0x2e>
     ea0:	c9 c0       	rjmp	.+402    	; 0x1034 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3e 83       	std	Y+6, r19	; 0x06
     eaa:	2d 83       	std	Y+5, r18	; 0x05
     eac:	6d 81       	ldd	r22, Y+5	; 0x05
     eae:	7e 81       	ldd	r23, Y+6	; 0x06
     eb0:	61 30       	cpi	r22, 0x01	; 1
     eb2:	71 05       	cpc	r23, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <DIO_enuSetPinValue+0x44>
     eb6:	41 c0       	rjmp	.+130    	; 0xf3a <DIO_enuSetPinValue+0xc6>
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	34 f4       	brge	.+12     	; 0xece <DIO_enuSetPinValue+0x5a>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	21 15       	cp	r18, r1
     ec8:	31 05       	cpc	r19, r1
     eca:	71 f0       	breq	.+28     	; 0xee8 <DIO_enuSetPinValue+0x74>
     ecc:	b0 c0       	rjmp	.+352    	; 0x102e <DIO_enuSetPinValue+0x1ba>
     ece:	6d 81       	ldd	r22, Y+5	; 0x05
     ed0:	7e 81       	ldd	r23, Y+6	; 0x06
     ed2:	62 30       	cpi	r22, 0x02	; 2
     ed4:	71 05       	cpc	r23, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_enuSetPinValue+0x66>
     ed8:	59 c0       	rjmp	.+178    	; 0xf8c <DIO_enuSetPinValue+0x118>
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <DIO_enuSetPinValue+0x72>
     ee4:	7c c0       	rjmp	.+248    	; 0xfde <DIO_enuSetPinValue+0x16a>
     ee6:	a3 c0       	rjmp	.+326    	; 0x102e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     ee8:	ab e3       	ldi	r26, 0x3B	; 59
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	eb e3       	ldi	r30, 0x3B	; 59
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_enuSetPinValue+0x90>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	2a 95       	dec	r18
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_enuSetPinValue+0x8c>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value<<Copy_u8PinID);
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	b9 01       	movw	r22, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_enuSetPinValue+0xba>
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	8a 95       	dec	r24
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_enuSetPinValue+0xb6>
     f32:	cb 01       	movw	r24, r22
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	7a c0       	rjmp	.+244    	; 0x102e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_enuSetPinValue+0xe2>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	2a 95       	dec	r18
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_enuSetPinValue+0xde>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value<<Copy_u8PinID);
     f60:	a8 e3       	ldi	r26, 0x38	; 56
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e3       	ldi	r30, 0x38	; 56
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b9 01       	movw	r22, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_enuSetPinValue+0x10c>
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_enuSetPinValue+0x108>
     f84:	cb 01       	movw	r24, r22
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	51 c0       	rjmp	.+162    	; 0x102e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     f8c:	a5 e3       	ldi	r26, 0x35	; 53
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e3       	ldi	r30, 0x35	; 53
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_enuSetPinValue+0x134>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_enuSetPinValue+0x130>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value<<Copy_u8PinID);
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	b9 01       	movw	r22, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_enuSetPinValue+0x15e>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_enuSetPinValue+0x15a>
     fd6:	cb 01       	movw	r24, r22
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	28 c0       	rjmp	.+80     	; 0x102e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_enuSetPinValue+0x186>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_enuSetPinValue+0x182>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value<<Copy_u8PinID);
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	b9 01       	movw	r22, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_enuSetPinValue+0x1b0>
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_enuSetPinValue+0x1ac>
    1028:	cb 01       	movw	r24, r22
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	26 96       	adiw	r28, 0x06	; 6
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_enuTogglePinValue+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_enuTogglePinValue+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    105e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	08 f0       	brcs	.+2      	; 0x1068 <DIO_enuTogglePinValue+0x1c>
    1066:	75 c0       	rjmp	.+234    	; 0x1152 <DIO_enuTogglePinValue+0x106>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	88 30       	cpi	r24, 0x08	; 8
    106c:	08 f0       	brcs	.+2      	; 0x1070 <DIO_enuTogglePinValue+0x24>
    106e:	71 c0       	rjmp	.+226    	; 0x1152 <DIO_enuTogglePinValue+0x106>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3d 83       	std	Y+5, r19	; 0x05
    1078:	2c 83       	std	Y+4, r18	; 0x04
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	49 f1       	breq	.+82     	; 0x10d6 <DIO_enuTogglePinValue+0x8a>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <DIO_enuTogglePinValue+0x4c>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <DIO_enuTogglePinValue+0x62>
    1096:	5a c0       	rjmp	.+180    	; 0x114c <DIO_enuTogglePinValue+0x100>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	71 f1       	breq	.+92     	; 0x10fe <DIO_enuTogglePinValue+0xb2>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	e9 f1       	breq	.+122    	; 0x1126 <DIO_enuTogglePinValue+0xda>
    10ac:	4f c0       	rjmp	.+158    	; 0x114c <DIO_enuTogglePinValue+0x100>
			{
			case DIO_u8GROUP_A:
				PORTA ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    10ae:	ab e3       	ldi	r26, 0x3B	; 59
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	eb e3       	ldi	r30, 0x3B	; 59
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_enuTogglePinValue+0x80>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_enuTogglePinValue+0x7c>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	3b c0       	rjmp	.+118    	; 0x114c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_B:
				PORTB ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    10d6:	a8 e3       	ldi	r26, 0x38	; 56
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e8 e3       	ldi	r30, 0x38	; 56
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_enuTogglePinValue+0xa8>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_enuTogglePinValue+0xa4>
    10f8:	84 27       	eor	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_C:
				PORTC ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    10fe:	a5 e3       	ldi	r26, 0x35	; 53
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enuTogglePinValue+0xd0>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_enuTogglePinValue+0xcc>
    1120:	84 27       	eor	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	13 c0       	rjmp	.+38     	; 0x114c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_D:
				PORTD ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    1126:	a2 e3       	ldi	r26, 0x32	; 50
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enuTogglePinValue+0xf8>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_enuTogglePinValue+0xf4>
    1148:	84 27       	eor	r24, r20
    114a:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_enuTogglePinValue+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	27 97       	sbiw	r28, 0x07	; 7
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	6b 83       	std	Y+3, r22	; 0x03
    1180:	5d 83       	std	Y+5, r21	; 0x05
    1182:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1184:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_enuGetPinValue+0x28>
    118e:	7e c0       	rjmp	.+252    	; 0x128c <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	08 f0       	brcs	.+2      	; 0x1198 <DIO_enuGetPinValue+0x30>
    1196:	77 c0       	rjmp	.+238    	; 0x1286 <DIO_enuGetPinValue+0x11e>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 30       	cpi	r24, 0x08	; 8
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <DIO_enuGetPinValue+0x38>
    119e:	73 c0       	rjmp	.+230    	; 0x1286 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3f 83       	std	Y+7, r19	; 0x07
    11a8:	2e 83       	std	Y+6, r18	; 0x06
    11aa:	4e 81       	ldd	r20, Y+6	; 0x06
    11ac:	5f 81       	ldd	r21, Y+7	; 0x07
    11ae:	41 30       	cpi	r20, 0x01	; 1
    11b0:	51 05       	cpc	r21, r1
    11b2:	59 f1       	breq	.+86     	; 0x120a <DIO_enuGetPinValue+0xa2>
    11b4:	8e 81       	ldd	r24, Y+6	; 0x06
    11b6:	9f 81       	ldd	r25, Y+7	; 0x07
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	34 f4       	brge	.+12     	; 0x11ca <DIO_enuGetPinValue+0x62>
    11be:	2e 81       	ldd	r18, Y+6	; 0x06
    11c0:	3f 81       	ldd	r19, Y+7	; 0x07
    11c2:	21 15       	cp	r18, r1
    11c4:	31 05       	cpc	r19, r1
    11c6:	69 f0       	breq	.+26     	; 0x11e2 <DIO_enuGetPinValue+0x7a>
    11c8:	5b c0       	rjmp	.+182    	; 0x1280 <DIO_enuGetPinValue+0x118>
    11ca:	4e 81       	ldd	r20, Y+6	; 0x06
    11cc:	5f 81       	ldd	r21, Y+7	; 0x07
    11ce:	42 30       	cpi	r20, 0x02	; 2
    11d0:	51 05       	cpc	r21, r1
    11d2:	79 f1       	breq	.+94     	; 0x1232 <DIO_enuGetPinValue+0xca>
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <DIO_enuGetPinValue+0x78>
    11de:	3d c0       	rjmp	.+122    	; 0x125a <DIO_enuGetPinValue+0xf2>
    11e0:	4f c0       	rjmp	.+158    	; 0x1280 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( (PINA>>Copy_u8PinID) & DIO_BIT_MASK);
    11e2:	e9 e3       	ldi	r30, 0x39	; 57
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_enuGetPinValue+0x92>
    11f6:	55 95       	asr	r21
    11f8:	47 95       	ror	r20
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_enuGetPinValue+0x8e>
    11fe:	ca 01       	movw	r24, r20
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	ec 81       	ldd	r30, Y+4	; 0x04
    1204:	fd 81       	ldd	r31, Y+5	; 0x05
    1206:	80 83       	st	Z, r24
    1208:	3b c0       	rjmp	.+118    	; 0x1280 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( (PINB>>Copy_u8PinID) & DIO_BIT_MASK);
    120a:	e6 e3       	ldi	r30, 0x36	; 54
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_enuGetPinValue+0xba>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_enuGetPinValue+0xb6>
    1226:	ca 01       	movw	r24, r20
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	ec 81       	ldd	r30, Y+4	; 0x04
    122c:	fd 81       	ldd	r31, Y+5	; 0x05
    122e:	80 83       	st	Z, r24
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( (PINC>>Copy_u8PinID) & DIO_BIT_MASK);
    1232:	e3 e3       	ldi	r30, 0x33	; 51
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_enuGetPinValue+0xe2>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_enuGetPinValue+0xde>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	ec 81       	ldd	r30, Y+4	; 0x04
    1254:	fd 81       	ldd	r31, Y+5	; 0x05
    1256:	80 83       	st	Z, r24
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( (PIND>>Copy_u8PinID) & DIO_BIT_MASK);
    125a:	e0 e3       	ldi	r30, 0x30	; 48
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_enuGetPinValue+0x10a>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_enuGetPinValue+0x106>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	ec 81       	ldd	r30, Y+4	; 0x04
    127c:	fd 81       	ldd	r31, Y+5	; 0x05
    127e:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	27 96       	adiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <TMU_vidInit>:

static TCB_t All_Tasks[ MAX_NUM_TASKS ];


void TMU_vidInit(void)
{
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <TMU_vidInit+0xa>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <TMU_vidInit+0xc>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <TMU_vidInit+0xe>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
#if TIMER_CH == TIMER0
	// ctc, dis oc0 pin , 1024 pres
	TCCR0 = 0x0D;
    12b6:	e3 e5       	ldi	r30, 0x53	; 83
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8d e0       	ldi	r24, 0x0D	; 13
    12bc:	80 83       	st	Z, r24

	#elif OS_TICK > 16 && OS_TICK <= 1500

		u8 max;
		// for(u8 i=1; i<=16 ; i++)
		for (u8 i=16; i>0;i--)
    12be:	80 e1       	ldi	r24, 0x10	; 16
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <TMU_vidInit+0x3c>
		{
			if (OS_TICK % i ==0)
    12c4:	84 e1       	ldi	r24, 0x14	; 20
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	69 2f       	mov	r22, r25
    12ca:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__udivmodqi4>
    12ce:	89 2f       	mov	r24, r25
    12d0:	88 23       	and	r24, r24
    12d2:	19 f4       	brne	.+6      	; 0x12da <TMU_vidInit+0x36>
			{
				max = i;
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	8e 83       	std	Y+6, r24	; 0x06
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <TMU_vidInit+0x42>

	#elif OS_TICK > 16 && OS_TICK <= 1500

		u8 max;
		// for(u8 i=1; i<=16 ; i++)
		for (u8 i=16; i>0;i--)
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	81 50       	subi	r24, 0x01	; 1
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	88 23       	and	r24, r24
    12e4:	79 f7       	brne	.-34     	; 0x12c4 <TMU_vidInit+0x20>
				max = i;
				// clear -break- statement if ascending algorithm is used
				break;
			}
		}
		if (max >1)
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	78 f1       	brcs	.+94     	; 0x134a <TMU_vidInit+0xa6>
		{
			OCR0 = (u8) ((max * CLOCK_FREQ) / 1024ul);
    12ec:	0c e5       	ldi	r16, 0x5C	; 92
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	20 e8       	ldi	r18, 0x80	; 128
    12fc:	3e e3       	ldi	r19, 0x3E	; 62
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__mulsi3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	07 2e       	mov	r0, r23
    1310:	7a e0       	ldi	r23, 0x0A	; 10
    1312:	b6 95       	lsr	r27
    1314:	a7 95       	ror	r26
    1316:	97 95       	ror	r25
    1318:	87 95       	ror	r24
    131a:	7a 95       	dec	r23
    131c:	d1 f7       	brne	.-12     	; 0x1312 <TMU_vidInit+0x6e>
    131e:	70 2d       	mov	r23, r0
    1320:	f8 01       	movw	r30, r16
    1322:	80 83       	st	Z, r24
			Num_CTC = OS_TICK / max;
    1324:	84 e1       	ldi	r24, 0x14	; 20
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	69 2f       	mov	r22, r25
    132a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__udivmodqi4>
    132e:	80 93 80 01 	sts	0x0180, r24
			CTC_Count = Num_CTC;
    1332:	80 91 80 01 	lds	r24, 0x0180
    1336:	80 93 81 01 	sts	0x0181, r24
			TIMSK |= (1<<1);
    133a:	a9 e5       	ldi	r26, 0x59	; 89
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e9 e5       	ldi	r30, 0x59	; 89
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	8c 93       	st	X, r24
    1348:	98 c0       	rjmp	.+304    	; 0x147a <TMU_vidInit+0x1d6>
		}
		else if (max == 1)
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <TMU_vidInit+0xae>
    1350:	94 c0       	rjmp	.+296    	; 0x147a <TMU_vidInit+0x1d6>
		{
			// OVF, dis oc0, 1024
			TCCR0 = 0x05;
    1352:	e3 e5       	ldi	r30, 0x53	; 83
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	80 83       	st	Z, r24
			f32 ovf = (OS_TICK/16.384);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e4       	ldi	r25, 0x40	; 64
    135e:	ac e9       	ldi	r26, 0x9C	; 156
    1360:	bf e3       	ldi	r27, 0x3F	; 63
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	ab 83       	std	Y+3, r26	; 0x03
    1368:	bc 83       	std	Y+4, r27	; 0x04
			if ( ovf - (u32)ovf > 0 )
    136a:	69 81       	ldd	r22, Y+1	; 0x01
    136c:	7a 81       	ldd	r23, Y+2	; 0x02
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	69 81       	ldd	r22, Y+1	; 0x01
    1388:	7a 81       	ldd	r23, Y+2	; 0x02
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	0c f0       	brlt	.+2      	; 0x13ac <TMU_vidInit+0x108>
    13aa:	54 c0       	rjmp	.+168    	; 0x1454 <TMU_vidInit+0x1b0>
			{
				Num_OVF = (u16)ovf + 1;
    13ac:	69 81       	ldd	r22, Y+1	; 0x01
    13ae:	7a 81       	ldd	r23, Y+2	; 0x02
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	90 93 83 01 	sts	0x0183, r25
    13c2:	80 93 82 01 	sts	0x0182, r24
				OVF_Count =  Num_OVF;
    13c6:	80 91 82 01 	lds	r24, 0x0182
    13ca:	90 91 83 01 	lds	r25, 0x0183
    13ce:	90 93 85 01 	sts	0x0185, r25
    13d2:	80 93 84 01 	sts	0x0184, r24
				Preload = (u8)(256ul * (1-  (ovf - (u32)ovf)  ) );
    13d6:	69 81       	ldd	r22, Y+1	; 0x01
    13d8:	7a 81       	ldd	r23, Y+2	; 0x02
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	69 81       	ldd	r22, Y+1	; 0x01
    13f4:	7a 81       	ldd	r23, Y+2	; 0x02
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9c 01       	movw	r18, r24
    1404:	ad 01       	movw	r20, r26
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	9f e3       	ldi	r25, 0x3F	; 63
    140e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	53 e4       	ldi	r21, 0x43	; 67
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	80 93 86 01 	sts	0x0186, r24
				TCNT0 = Preload;
    143a:	e2 e5       	ldi	r30, 0x52	; 82
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 91 86 01 	lds	r24, 0x0186
    1442:	80 83       	st	Z, r24
				TIMSK |= (1<<0);
    1444:	a9 e5       	ldi	r26, 0x59	; 89
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e9 e5       	ldi	r30, 0x59	; 89
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
    1452:	13 c0       	rjmp	.+38     	; 0x147a <TMU_vidInit+0x1d6>
			}
			else
			{
				Num_OVF = (u16)ovf;
    1454:	69 81       	ldd	r22, Y+1	; 0x01
    1456:	7a 81       	ldd	r23, Y+2	; 0x02
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	90 93 83 01 	sts	0x0183, r25
    1468:	80 93 82 01 	sts	0x0182, r24
				TIMSK |= (1<<0);
    146c:	a9 e5       	ldi	r26, 0x59	; 89
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e9 e5       	ldi	r30, 0x59	; 89
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	81 60       	ori	r24, 0x01	; 1
    1478:	8c 93       	st	X, r24

	#endif
#else
#error"Timer channel configuration is wrong"
#endif
}
    147a:	26 96       	adiw	r28, 0x06	; 6
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <TMU_vidCreateTask>:


void TMU_vidCreateTask(void (*pfun)(void*), void * Parameter , u16 Periodicity, u8 Priority , u8 Offset)
{
    1490:	0f 93       	push	r16
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	28 97       	sbiw	r28, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	7c 83       	std	Y+4, r23	; 0x04
    14ac:	6b 83       	std	Y+3, r22	; 0x03
    14ae:	5e 83       	std	Y+6, r21	; 0x06
    14b0:	4d 83       	std	Y+5, r20	; 0x05
    14b2:	2f 83       	std	Y+7, r18	; 0x07
    14b4:	08 87       	std	Y+8, r16	; 0x08
#if MAX_NUM_TASKS == 0 || MAX_NUM_TASKS > 10
#error " Max num of tasks exceeds 10, it must be below 10"
#endif

	if (pfun != NULL && Periodicity > 0 && Priority < MAX_NUM_TASKS)
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <TMU_vidCreateTask+0x30>
    14be:	57 c0       	rjmp	.+174    	; 0x156e <TMU_vidCreateTask+0xde>
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	09 f4       	brne	.+2      	; 0x14ca <TMU_vidCreateTask+0x3a>
    14c8:	52 c0       	rjmp	.+164    	; 0x156e <TMU_vidCreateTask+0xde>
    14ca:	8f 81       	ldd	r24, Y+7	; 0x07
    14cc:	8a 30       	cpi	r24, 0x0A	; 10
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <TMU_vidCreateTask+0x42>
    14d0:	4e c0       	rjmp	.+156    	; 0x156e <TMU_vidCreateTask+0xde>
	{
		All_Tasks [ Priority ].fun = pfun;
    14d2:	8f 81       	ldd	r24, Y+7	; 0x07
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	fc 01       	movw	r30, r24
    14e6:	e9 57       	subi	r30, 0x79	; 121
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
		All_Tasks [ Priority ].periodicity = Periodicity;
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	fc 01       	movw	r30, r24
    1508:	e9 57       	subi	r30, 0x79	; 121
    150a:	fe 4f       	sbci	r31, 0xFE	; 254
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
		All_Tasks [ Priority ].state = READY;
    1514:	8f 81       	ldd	r24, Y+7	; 0x07
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	fc 01       	movw	r30, r24
    1528:	e3 57       	subi	r30, 0x73	; 115
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	88 e3       	ldi	r24, 0x38	; 56
    152e:	80 83       	st	Z, r24
		All_Tasks [ Priority ].offset = Offset;
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	fc 01       	movw	r30, r24
    1544:	e2 57       	subi	r30, 0x72	; 114
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	88 85       	ldd	r24, Y+8	; 0x08
    154a:	80 83       	st	Z, r24
		All_Tasks [ Priority ].Parameter = Parameter;
    154c:	8f 81       	ldd	r24, Y+7	; 0x07
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	e9 57       	subi	r30, 0x79	; 121
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
	}
}
    156e:	28 96       	adiw	r28, 0x08	; 8
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <TMU_vidStartScheduler>:


void TMU_vidStartScheduler(void)
{
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <TMU_vidStartScheduler+0xe>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <TMU_vidStartScheduler+0x10>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	u32 Temp_Ticks=0;
    1598:	1a 82       	std	Y+2, r1	; 0x02
    159a:	1b 82       	std	Y+3, r1	; 0x03
    159c:	1c 82       	std	Y+4, r1	; 0x04
    159e:	1d 82       	std	Y+5, r1	; 0x05
	asm("SEI");
    15a0:	78 94       	sei
	while(1)
	{
		if (OS_Ticks > Temp_Ticks)
    15a2:	20 91 7c 01 	lds	r18, 0x017C
    15a6:	30 91 7d 01 	lds	r19, 0x017D
    15aa:	40 91 7e 01 	lds	r20, 0x017E
    15ae:	50 91 7f 01 	lds	r21, 0x017F
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	ac 81       	ldd	r26, Y+4	; 0x04
    15b8:	bd 81       	ldd	r27, Y+5	; 0x05
    15ba:	82 17       	cp	r24, r18
    15bc:	93 07       	cpc	r25, r19
    15be:	a4 07       	cpc	r26, r20
    15c0:	b5 07       	cpc	r27, r21
    15c2:	78 f7       	brcc	.-34     	; 0x15a2 <TMU_vidStartScheduler+0x20>
		{
			Temp_Ticks = OS_Ticks;
    15c4:	80 91 7c 01 	lds	r24, 0x017C
    15c8:	90 91 7d 01 	lds	r25, 0x017D
    15cc:	a0 91 7e 01 	lds	r26, 0x017E
    15d0:	b0 91 7f 01 	lds	r27, 0x017F
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	9b 83       	std	Y+3, r25	; 0x03
    15d8:	ac 83       	std	Y+4, r26	; 0x04
    15da:	bd 83       	std	Y+5, r27	; 0x05

			//Descending [highest = max-1]
			//for (s8 i=MAX_NUM_TASKS-1 ; i>=0 ; i--)
			//Ascending  [highest = 0]
			for (u8 i=0 ; i< MAX_NUM_TASKS; i++)
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	b9 c0       	rjmp	.+370    	; 0x1752 <TMU_vidStartScheduler+0x1d0>
			{
				if (All_Tasks[i].fun != NULL)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	fc 01       	movw	r30, r24
    15f4:	e9 57       	subi	r30, 0x79	; 121
    15f6:	fe 4f       	sbci	r31, 0xFE	; 254
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f4       	brne	.+2      	; 0x1602 <TMU_vidStartScheduler+0x80>
    1600:	a5 c0       	rjmp	.+330    	; 0x174c <TMU_vidStartScheduler+0x1ca>
				{
					if (
    1602:	20 91 7c 01 	lds	r18, 0x017C
    1606:	30 91 7d 01 	lds	r19, 0x017D
    160a:	40 91 7e 01 	lds	r20, 0x017E
    160e:	50 91 7f 01 	lds	r21, 0x017F
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	fc 01       	movw	r30, r24
    1626:	e2 57       	subi	r30, 0x72	; 114
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	80 81       	ld	r24, Z
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	79 01       	movw	r14, r18
    1636:	8a 01       	movw	r16, r20
    1638:	e8 1a       	sub	r14, r24
    163a:	f9 0a       	sbc	r15, r25
    163c:	0a 0b       	sbc	r16, r26
    163e:	1b 0b       	sbc	r17, r27
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	fc 01       	movw	r30, r24
    1656:	e9 57       	subi	r30, 0x79	; 121
    1658:	fe 4f       	sbci	r31, 0xFE	; 254
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	9c 01       	movw	r18, r24
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodsi4>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	a1 05       	cpc	r26, r1
    1674:	b1 05       	cpc	r27, r1
    1676:	f1 f4       	brne	.+60     	; 0x16b4 <TMU_vidStartScheduler+0x132>
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	fc 01       	movw	r30, r24
    168c:	e2 57       	subi	r30, 0x72	; 114
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	80 91 7c 01 	lds	r24, 0x017C
    169e:	90 91 7d 01 	lds	r25, 0x017D
    16a2:	a0 91 7e 01 	lds	r26, 0x017E
    16a6:	b0 91 7f 01 	lds	r27, 0x017F
    16aa:	82 17       	cp	r24, r18
    16ac:	93 07       	cpc	r25, r19
    16ae:	a4 07       	cpc	r26, r20
    16b0:	b5 07       	cpc	r27, r21
    16b2:	f0 f4       	brcc	.+60     	; 0x16f0 <TMU_vidStartScheduler+0x16e>
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	fc 01       	movw	r30, r24
    16c8:	e2 57       	subi	r30, 0x72	; 114
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	80 81       	ld	r24, Z
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	80 91 7c 01 	lds	r24, 0x017C
    16da:	90 91 7d 01 	lds	r25, 0x017D
    16de:	a0 91 7e 01 	lds	r26, 0x017E
    16e2:	b0 91 7f 01 	lds	r27, 0x017F
    16e6:	28 17       	cp	r18, r24
    16e8:	39 07       	cpc	r19, r25
    16ea:	4a 07       	cpc	r20, r26
    16ec:	5b 07       	cpc	r21, r27
    16ee:	71 f5       	brne	.+92     	; 0x174c <TMU_vidStartScheduler+0x1ca>
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	fc 01       	movw	r30, r24
    1704:	e3 57       	subi	r30, 0x73	; 115
    1706:	fe 4f       	sbci	r31, 0xFE	; 254
    1708:	80 81       	ld	r24, Z
    170a:	88 33       	cpi	r24, 0x38	; 56
    170c:	f9 f4       	brne	.+62     	; 0x174c <TMU_vidStartScheduler+0x1ca>
							OS_Ticks == All_Tasks[i].offset
							)
							&& All_Tasks[i].state == READY )
					{
						//Dispatcher
						All_Tasks[i].fun( All_Tasks[i].Parameter );
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	e9 57       	subi	r30, 0x79	; 121
    1724:	fe 4f       	sbci	r31, 0xFE	; 254
    1726:	20 81       	ld	r18, Z
    1728:	31 81       	ldd	r19, Z+1	; 0x01
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	fc 01       	movw	r30, r24
    1740:	e9 57       	subi	r30, 0x79	; 121
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	f9 01       	movw	r30, r18
    174a:	09 95       	icall
			Temp_Ticks = OS_Ticks;

			//Descending [highest = max-1]
			//for (s8 i=MAX_NUM_TASKS-1 ; i>=0 ; i--)
			//Ascending  [highest = 0]
			for (u8 i=0 ; i< MAX_NUM_TASKS; i++)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	8f 5f       	subi	r24, 0xFF	; 255
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	8a 30       	cpi	r24, 0x0A	; 10
    1756:	08 f4       	brcc	.+2      	; 0x175a <TMU_vidStartScheduler+0x1d8>
    1758:	43 cf       	rjmp	.-378    	; 0x15e0 <TMU_vidStartScheduler+0x5e>
    175a:	23 cf       	rjmp	.-442    	; 0x15a2 <TMU_vidStartScheduler+0x20>

0000175c <TMU_vidSuspend>:
	}
}


void TMU_vidSuspend( u8 Priority )
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	8a 30       	cpi	r24, 0x0A	; 10
    176c:	70 f4       	brcc	.+28     	; 0x178a <TMU_vidSuspend+0x2e>
	{
		All_Tasks[Priority].state = PAUSED;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	fc 01       	movw	r30, r24
    1782:	e3 57       	subi	r30, 0x73	; 115
    1784:	fe 4f       	sbci	r31, 0xFE	; 254
    1786:	82 e2       	ldi	r24, 0x22	; 34
    1788:	80 83       	st	Z, r24
	}
}
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <TMU_vidResume>:


void TMU_vidResume ( u8 Priority )
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	0f 92       	push	r0
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS && All_Tasks[Priority].state == PAUSED)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	8a 30       	cpi	r24, 0x0A	; 10
    17a2:	e8 f4       	brcc	.+58     	; 0x17de <TMU_vidResume+0x4c>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	fc 01       	movw	r30, r24
    17b8:	e3 57       	subi	r30, 0x73	; 115
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	80 81       	ld	r24, Z
    17be:	82 32       	cpi	r24, 0x22	; 34
    17c0:	71 f4       	brne	.+28     	; 0x17de <TMU_vidResume+0x4c>
	{
		All_Tasks[Priority].state = READY;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	fc 01       	movw	r30, r24
    17d6:	e3 57       	subi	r30, 0x73	; 115
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	88 e3       	ldi	r24, 0x38	; 56
    17dc:	80 83       	st	Z, r24
	}
}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <TMU_vidDelete>:


void TMU_vidDelete ( u8 Priority )
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS)
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	8a 30       	cpi	r24, 0x0A	; 10
    17f6:	e0 f4       	brcc	.+56     	; 0x1830 <TMU_vidDelete+0x4a>
	{
		All_Tasks[Priority].state = KILLED;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	fc 01       	movw	r30, r24
    180c:	e3 57       	subi	r30, 0x73	; 115
    180e:	fe 4f       	sbci	r31, 0xFE	; 254
    1810:	8a e5       	ldi	r24, 0x5A	; 90
    1812:	80 83       	st	Z, r24
		All_Tasks[Priority].fun =NULL;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	fc 01       	movw	r30, r24
    1828:	e9 57       	subi	r30, 0x79	; 121
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	11 82       	std	Z+1, r1	; 0x01
    182e:	10 82       	st	Z, r1
	}
}
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <__vector_10>:

#if TIMER_CH == TIMER0

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
	CTC_Count --;
    1852:	80 91 81 01 	lds	r24, 0x0181
    1856:	81 50       	subi	r24, 0x01	; 1
    1858:	80 93 81 01 	sts	0x0181, r24
	if (CTC_Count == 0)
    185c:	80 91 81 01 	lds	r24, 0x0181
    1860:	88 23       	and	r24, r24
    1862:	b9 f4       	brne	.+46     	; 0x1892 <__vector_10+0x5a>
	{
		OS_Ticks++;
    1864:	80 91 7c 01 	lds	r24, 0x017C
    1868:	90 91 7d 01 	lds	r25, 0x017D
    186c:	a0 91 7e 01 	lds	r26, 0x017E
    1870:	b0 91 7f 01 	lds	r27, 0x017F
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	a1 1d       	adc	r26, r1
    1878:	b1 1d       	adc	r27, r1
    187a:	80 93 7c 01 	sts	0x017C, r24
    187e:	90 93 7d 01 	sts	0x017D, r25
    1882:	a0 93 7e 01 	sts	0x017E, r26
    1886:	b0 93 7f 01 	sts	0x017F, r27
		CTC_Count = Num_CTC;
    188a:	80 91 80 01 	lds	r24, 0x0180
    188e:	80 93 81 01 	sts	0x0181, r24
	}

}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__vector_11>:

void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	0f 92       	push	r0
    18b0:	11 24       	eor	r1, r1
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	OVF_Count --;
    18c6:	80 91 84 01 	lds	r24, 0x0184
    18ca:	90 91 85 01 	lds	r25, 0x0185
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	90 93 85 01 	sts	0x0185, r25
    18d4:	80 93 84 01 	sts	0x0184, r24
	if (OVF_Count == 0)
    18d8:	80 91 84 01 	lds	r24, 0x0184
    18dc:	90 91 85 01 	lds	r25, 0x0185
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	01 f5       	brne	.+64     	; 0x1924 <__vector_11+0x7c>
	{
		TCNT0 = Preload;
    18e4:	e2 e5       	ldi	r30, 0x52	; 82
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 91 86 01 	lds	r24, 0x0186
    18ec:	80 83       	st	Z, r24

		OS_Ticks++;
    18ee:	80 91 7c 01 	lds	r24, 0x017C
    18f2:	90 91 7d 01 	lds	r25, 0x017D
    18f6:	a0 91 7e 01 	lds	r26, 0x017E
    18fa:	b0 91 7f 01 	lds	r27, 0x017F
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	a1 1d       	adc	r26, r1
    1902:	b1 1d       	adc	r27, r1
    1904:	80 93 7c 01 	sts	0x017C, r24
    1908:	90 93 7d 01 	sts	0x017D, r25
    190c:	a0 93 7e 01 	sts	0x017E, r26
    1910:	b0 93 7f 01 	sts	0x017F, r27

		OVF_Count = Num_OVF;
    1914:	80 91 82 01 	lds	r24, 0x0182
    1918:	90 91 83 01 	lds	r25, 0x0183
    191c:	90 93 85 01 	sts	0x0185, r25
    1920:	80 93 84 01 	sts	0x0184, r24
	}
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"

void UART_Init(void)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRD,0);
    1946:	a1 e3       	ldi	r26, 0x31	; 49
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	8c 93       	st	X, r24
	SET_BIT(DDRD,1);
    1954:	a1 e3       	ldi	r26, 0x31	; 49
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e1 e3       	ldi	r30, 0x31	; 49
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	82 60       	ori	r24, 0x02	; 2
    1960:	8c 93       	st	X, r24
	/*Enable Rx*/
	SET_BIT(UCSRB,4);
    1962:	aa e2       	ldi	r26, 0x2A	; 42
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ea e2       	ldi	r30, 0x2A	; 42
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 61       	ori	r24, 0x10	; 16
    196e:	8c 93       	st	X, r24
	/*Enable Tx*/
	SET_BIT(UCSRB,3);
    1970:	aa e2       	ldi	r26, 0x2A	; 42
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ea e2       	ldi	r30, 0x2A	; 42
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 60       	ori	r24, 0x08	; 8
    197c:	8c 93       	st	X, r24
	
	/*UCSRC Select*/	/*Asynchronous mode*/	/*Parity mode disabled*/			/*1-bit stop*/		/*8-bits character size*/			/*Clock Polarity*/
	SET_BIT(UCSRC,7);	CLR_BIT(UCSRC,6);		CLR_BIT(UCSRC,5);CLR_BIT(UCSRC,4);	CLR_BIT(UCSRC,3);	SET_BIT(UCSRC,2);SET_BIT(UCSRC,1);	CLR_BIT(UCSRC,0);
    197e:	a0 e4       	ldi	r26, 0x40	; 64
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e0 e4       	ldi	r30, 0x40	; 64
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	8c 93       	st	X, r24
    198c:	a0 e4       	ldi	r26, 0x40	; 64
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e0 e4       	ldi	r30, 0x40	; 64
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7b       	andi	r24, 0xBF	; 191
    1998:	8c 93       	st	X, r24
    199a:	a0 e4       	ldi	r26, 0x40	; 64
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e0 e4       	ldi	r30, 0x40	; 64
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7d       	andi	r24, 0xDF	; 223
    19a6:	8c 93       	st	X, r24
    19a8:	a0 e4       	ldi	r26, 0x40	; 64
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e0 e4       	ldi	r30, 0x40	; 64
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	8c 93       	st	X, r24
    19b6:	a0 e4       	ldi	r26, 0x40	; 64
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e0 e4       	ldi	r30, 0x40	; 64
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	87 7f       	andi	r24, 0xF7	; 247
    19c2:	8c 93       	st	X, r24
    19c4:	a0 e4       	ldi	r26, 0x40	; 64
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e0 e4       	ldi	r30, 0x40	; 64
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	84 60       	ori	r24, 0x04	; 4
    19d0:	8c 93       	st	X, r24
    19d2:	a0 e4       	ldi	r26, 0x40	; 64
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e0 e4       	ldi	r30, 0x40	; 64
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	82 60       	ori	r24, 0x02	; 2
    19de:	8c 93       	st	X, r24
    19e0:	a0 e4       	ldi	r26, 0x40	; 64
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e0 e4       	ldi	r30, 0x40	; 64
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8e 7f       	andi	r24, 0xFE	; 254
    19ec:	8c 93       	st	X, r24
	
	
	/*Baud Rate 9600*/
	UBRRL = 103;
    19ee:	e9 e2       	ldi	r30, 0x29	; 41
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	87 e6       	ldi	r24, 0x67	; 103
    19f4:	80 83       	st	Z, r24
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <UART_Send>:
void UART_Send(u8 data)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	89 83       	std	Y+1, r24	; 0x01
	/*Wait till buffer is empty*/
	while((GET_BIT(UCSRA,5)) == 0);
    1a08:	eb e2       	ldi	r30, 0x2B	; 43
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	82 95       	swap	r24
    1a10:	86 95       	lsr	r24
    1a12:	87 70       	andi	r24, 0x07	; 7
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	81 70       	andi	r24, 0x01	; 1
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	a1 f3       	breq	.-24     	; 0x1a08 <UART_Send+0xc>
	/*Transmit data*/
	UDR = data;
    1a20:	ec e2       	ldi	r30, 0x2C	; 44
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 83       	st	Z, r24
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <UART_Receive>:
u8 UART_Receive(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	/*Wait for data to be received*/
	while((GET_BIT(UCSRA,7)) == 0);
    1a38:	eb e2       	ldi	r30, 0x2B	; 43
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 23       	and	r24, r24
    1a40:	dc f7       	brge	.-10     	; 0x1a38 <UART_Receive+0x8>
	/*Return the received data*/
	return UDR;
    1a42:	ec e2       	ldi	r30, 0x2C	; 44
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
}
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <main>:
char buffer[20];
u8 new;
u8 flag;
int
main()
{
    1a4e:	0f 93       	push	r16
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62

	//UART_Init();
	/*7 Segement for Ones*/
	DDRC =0xff;
    1a58:	e4 e3       	ldi	r30, 0x34	; 52
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	80 83       	st	Z, r24

	/*7 Segement for Tenth*/
	DDRB =0xff;
    1a60:	e7 e3       	ldi	r30, 0x37	; 55
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	80 83       	st	Z, r24

	/*Buttons pull-up*/
	DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN0,DIO_u8INPUT);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN1,DIO_u8INPUT);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN0,DIO_u8HIGH);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN1,DIO_u8HIGH);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>

	/*Lights*/
	/*Green*/
	DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8OUTPUT);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_enuSetPinDirection>
	/*Yellow*/
	DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8OUTPUT);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_enuSetPinDirection>
	/*Green*/
	DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN4,DIO_u8OUTPUT);
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_enuSetPinDirection>

	TMU_vidInit();
    1aae:	0e 94 52 09 	call	0x12a4	; 0x12a4 <TMU_vidInit>

	TMU_vidCreateTask(Timer 		, NULL   , 50  , 0 , 0);
    1ab2:	83 e6       	ldi	r24, 0x63	; 99
    1ab4:	9e e0       	ldi	r25, 0x0E	; 14
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	42 e3       	ldi	r20, 0x32	; 50
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(SevSegRight 	, NULL   , 1  	, 1 , 0);
    1ac6:	81 eb       	ldi	r24, 0xB1	; 177
    1ac8:	9d e0       	ldi	r25, 0x0D	; 13
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(SevSegLeft 	, NULL   , 1  	, 2 , 0);
    1ada:	8d ec       	ldi	r24, 0xCD	; 205
    1adc:	9d e0       	ldi	r25, 0x0D	; 13
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	22 e0       	ldi	r18, 0x02	; 2
    1ae8:	00 e0       	ldi	r16, 0x00	; 0
    1aea:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(GreenLight 	, NULL   , 1  	, 3 , 0);
    1aee:	88 ee       	ldi	r24, 0xE8	; 232
    1af0:	9d e0       	ldi	r25, 0x0D	; 13
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	23 e0       	ldi	r18, 0x03	; 3
    1afc:	00 e0       	ldi	r16, 0x00	; 0
    1afe:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(RedLight 		, NULL   , 1  	, 4 , 0);
    1b02:	85 e3       	ldi	r24, 0x35	; 53
    1b04:	9e e0       	ldi	r25, 0x0E	; 14
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	24 e0       	ldi	r18, 0x04	; 4
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(YellowLight 	, NULL   , 1  	, 5 , 0);
    1b16:	86 e1       	ldi	r24, 0x16	; 22
    1b18:	9e e0       	ldi	r25, 0x0E	; 14
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	25 e0       	ldi	r18, 0x05	; 5
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(UpCount 		, NULL   , 1  	, 6 , 0);
    1b2a:	84 e7       	ldi	r24, 0x74	; 116
    1b2c:	9e e0       	ldi	r25, 0x0E	; 14
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	26 e0       	ldi	r18, 0x06	; 6
    1b38:	00 e0       	ldi	r16, 0x00	; 0
    1b3a:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	TMU_vidCreateTask(DownCount 	, NULL   , 1  	, 7 , 0);
    1b3e:	87 ea       	ldi	r24, 0xA7	; 167
    1b40:	9e e0       	ldi	r25, 0x0E	; 14
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	27 e0       	ldi	r18, 0x07	; 7
    1b4c:	00 e0       	ldi	r16, 0x00	; 0
    1b4e:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMU_vidCreateTask>
	/*TMU_vidCreateTask(MobileReceive	, NULL   , 1  	, 6 , 0);
	TMU_vidCreateTask(Check		 	, NULL   , 1  	, 7 , 0);
	TMU_vidCreateTask(Read		 	, NULL   , 1  	, 8 , 0);*/
	TMU_vidStartScheduler();
    1b52:	0e 94 c1 0a 	call	0x1582	; 0x1582 <TMU_vidStartScheduler>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <SevSegRight>:


void SevSegRight(void*p)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <SevSegRight+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	PORTC = sevseg[Traffic1.Time%10];
    1b70:	a5 e3       	ldi	r26, 0x35	; 53
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	80 91 7a 01 	lds	r24, 0x017A
    1b78:	9a e0       	ldi	r25, 0x0A	; 10
    1b7a:	69 2f       	mov	r22, r25
    1b7c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__udivmodqi4>
    1b80:	89 2f       	mov	r24, r25
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	fc 01       	movw	r30, r24
    1b88:	e2 59       	subi	r30, 0x92	; 146
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8c 93       	st	X, r24
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <SevSegLeft>:
void SevSegLeft(void*p)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <SevSegLeft+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	PORTB = sevseg[Traffic1.Time/10];
    1ba8:	a8 e3       	ldi	r26, 0x38	; 56
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	80 91 7a 01 	lds	r24, 0x017A
    1bb0:	9a e0       	ldi	r25, 0x0A	; 10
    1bb2:	69 2f       	mov	r22, r25
    1bb4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__udivmodqi4>
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e2 59       	subi	r30, 0x92	; 146
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8c 93       	st	X, r24
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <GreenLight>:
void GreenLight(void*p)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GreenLight+0x6>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
	if(Traffic1.LightColor == GREEN && Traffic1.Time>1)
    1bde:	80 91 79 01 	lds	r24, 0x0179
    1be2:	85 30       	cpi	r24, 0x05	; 5
    1be4:	51 f4       	brne	.+20     	; 0x1bfa <GreenLight+0x2a>
    1be6:	80 91 7a 01 	lds	r24, 0x017A
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	30 f0       	brcs	.+12     	; 0x1bfa <GreenLight+0x2a>
	{
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN4,DIO_u8HIGH);
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	64 e0       	ldi	r22, 0x04	; 4
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <GreenLight+0x52>
	}else if(Traffic1.LightColor == GREEN && Traffic1.Time == 0)
    1bfa:	80 91 79 01 	lds	r24, 0x0179
    1bfe:	85 30       	cpi	r24, 0x05	; 5
    1c00:	81 f4       	brne	.+32     	; 0x1c22 <GreenLight+0x52>
    1c02:	80 91 7a 01 	lds	r24, 0x017A
    1c06:	88 23       	and	r24, r24
    1c08:	61 f4       	brne	.+24     	; 0x1c22 <GreenLight+0x52>
	{
		DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN4,DIO_u8LOW);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	64 e0       	ldi	r22, 0x04	; 4
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
		Traffic1.LightColor = RED;
    1c14:	86 e0       	ldi	r24, 0x06	; 6
    1c16:	80 93 79 01 	sts	0x0179, r24
		Traffic1.Time = Interval;
    1c1a:	80 91 78 01 	lds	r24, 0x0178
    1c1e:	80 93 7a 01 	sts	0x017A, r24
	}

}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <YellowLight>:
void YellowLight(void*p)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <YellowLight+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
	if(Traffic1.Time<4 && Traffic1.Time>0)
    1c3a:	80 91 7a 01 	lds	r24, 0x017A
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	50 f4       	brcc	.+20     	; 0x1c56 <YellowLight+0x2a>
    1c42:	80 91 7a 01 	lds	r24, 0x017A
    1c46:	88 23       	and	r24, r24
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <YellowLight+0x2a>
		{
			DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8HIGH);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	63 e0       	ldi	r22, 0x03	; 3
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <YellowLight+0x34>
		}else
		{
			DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8LOW);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
		}
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <RedLight>:
void RedLight(void*p)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <RedLight+0x6>
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
	if(Traffic1.LightColor == RED && Traffic1.Time>1)
    1c78:	80 91 79 01 	lds	r24, 0x0179
    1c7c:	86 30       	cpi	r24, 0x06	; 6
    1c7e:	51 f4       	brne	.+20     	; 0x1c94 <RedLight+0x2a>
    1c80:	80 91 7a 01 	lds	r24, 0x017A
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	30 f0       	brcs	.+12     	; 0x1c94 <RedLight+0x2a>
		{
			DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8HIGH);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 e0       	ldi	r22, 0x02	; 2
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <RedLight+0x52>
		}else if(Traffic1.LightColor == RED && Traffic1.Time == 0)
    1c94:	80 91 79 01 	lds	r24, 0x0179
    1c98:	86 30       	cpi	r24, 0x06	; 6
    1c9a:	81 f4       	brne	.+32     	; 0x1cbc <RedLight+0x52>
    1c9c:	80 91 7a 01 	lds	r24, 0x017A
    1ca0:	88 23       	and	r24, r24
    1ca2:	61 f4       	brne	.+24     	; 0x1cbc <RedLight+0x52>
		{
			DIO_enuSetPinValue(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8LOW);
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	62 e0       	ldi	r22, 0x02	; 2
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enuSetPinValue>
			Traffic1.LightColor = GREEN;
    1cae:	85 e0       	ldi	r24, 0x05	; 5
    1cb0:	80 93 79 01 	sts	0x0179, r24
			Traffic1.Time = Interval;
    1cb4:	80 91 78 01 	lds	r24, 0x0178
    1cb8:	80 93 7a 01 	sts	0x017A, r24
		}
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <Timer>:
void Timer(void*p)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <Timer+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	/*Decrement Timer by 1 every 1 sec*/
	Traffic1.Time--;
    1cd4:	80 91 7a 01 	lds	r24, 0x017A
    1cd8:	81 50       	subi	r24, 0x01	; 1
    1cda:	80 93 7a 01 	sts	0x017A, r24
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <UpCount>:
void UpCount(void*p)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <UpCount+0x6>
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	9b 83       	std	Y+3, r25	; 0x03
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
	static u8 hold;
	u8 state;
		DIO_enuGetPinValue(DIO_u8GROUP_A,DIO_u8PIN0, &state);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	9e 01       	movw	r18, r28
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	a9 01       	movw	r20, r18
    1d04:	0e 94 b4 08 	call	0x1168	; 0x1168 <DIO_enuGetPinValue>
		if(state ==0 && hold ==0)
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	88 23       	and	r24, r24
    1d0c:	89 f4       	brne	.+34     	; 0x1d30 <UpCount+0x48>
    1d0e:	80 91 d7 01 	lds	r24, 0x01D7
    1d12:	88 23       	and	r24, r24
    1d14:	69 f4       	brne	.+26     	; 0x1d30 <UpCount+0x48>
		{
			hold=1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 d7 01 	sts	0x01D7, r24
			if(Interval < 99)
    1d1c:	80 91 78 01 	lds	r24, 0x0178
    1d20:	83 36       	cpi	r24, 0x63	; 99
    1d22:	78 f4       	brcc	.+30     	; 0x1d42 <UpCount+0x5a>
			{
				Interval++;
    1d24:	80 91 78 01 	lds	r24, 0x0178
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	80 93 78 01 	sts	0x0178, r24
    1d2e:	09 c0       	rjmp	.+18     	; 0x1d42 <UpCount+0x5a>
			}
		}else if(state == 1 && hold ==1)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	31 f4       	brne	.+12     	; 0x1d42 <UpCount+0x5a>
    1d36:	80 91 d7 01 	lds	r24, 0x01D7
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <UpCount+0x5a>
		{
			hold=0;
    1d3e:	10 92 d7 01 	sts	0x01D7, r1
		}

}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DownCount>:
void DownCount(void*p)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DownCount+0x6>
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9b 83       	std	Y+3, r25	; 0x03
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
	static u8 hold;
		u8 state;
			DIO_enuGetPinValue(DIO_u8GROUP_A,DIO_u8PIN1, &state);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	9e 01       	movw	r18, r28
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	a9 01       	movw	r20, r18
    1d6a:	0e 94 b4 08 	call	0x1168	; 0x1168 <DIO_enuGetPinValue>
			if(state ==0 && hold ==0)
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	88 23       	and	r24, r24
    1d72:	89 f4       	brne	.+34     	; 0x1d96 <DownCount+0x48>
    1d74:	80 91 d8 01 	lds	r24, 0x01D8
    1d78:	88 23       	and	r24, r24
    1d7a:	69 f4       	brne	.+26     	; 0x1d96 <DownCount+0x48>
			{
				hold=1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 d8 01 	sts	0x01D8, r24
				if(Interval > 0)
    1d82:	80 91 78 01 	lds	r24, 0x0178
    1d86:	88 23       	and	r24, r24
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <DownCount+0x5a>
				{
					Interval--;
    1d8a:	80 91 78 01 	lds	r24, 0x0178
    1d8e:	81 50       	subi	r24, 0x01	; 1
    1d90:	80 93 78 01 	sts	0x0178, r24
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <DownCount+0x5a>
				}
			}else if(state == 1 && hold ==1)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	31 f4       	brne	.+12     	; 0x1da8 <DownCount+0x5a>
    1d9c:	80 91 d8 01 	lds	r24, 0x01D8
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <DownCount+0x5a>
			{
				hold=0;
    1da4:	10 92 d8 01 	sts	0x01D8, r1
			}
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <Read>:
void Read(void*p)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <Read+0x6>
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
	if(flag == 'r')
    1dc4:	80 91 da 01 	lds	r24, 0x01DA
    1dc8:	82 37       	cpi	r24, 0x72	; 114
    1dca:	89 f5       	brne	.+98     	; 0x1e2e <Read+0x7a>
	{
		if(strncmp("red =",buffer,5) ==0)
    1dcc:	80 e6       	ldi	r24, 0x60	; 96
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	2b ed       	ldi	r18, 0xDB	; 219
    1dd2:	31 e0       	ldi	r19, 0x01	; 1
    1dd4:	b9 01       	movw	r22, r18
    1dd6:	45 e0       	ldi	r20, 0x05	; 5
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <strncmp>
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	31 f5       	brne	.+76     	; 0x1e2e <Read+0x7a>
		{
			u8 i= strlen(buffer);
    1de2:	8b ed       	ldi	r24, 0xDB	; 219
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <strlen>
    1dea:	89 83       	std	Y+1, r24	; 0x01
			if(i==6)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	86 30       	cpi	r24, 0x06	; 6
    1df0:	31 f4       	brne	.+12     	; 0x1dfe <Read+0x4a>
			{

				Interval = buffer[5] - '0';
    1df2:	80 91 e0 01 	lds	r24, 0x01E0
    1df6:	80 53       	subi	r24, 0x30	; 48
    1df8:	80 93 78 01 	sts	0x0178, r24
    1dfc:	18 c0       	rjmp	.+48     	; 0x1e2e <Read+0x7a>

			}else if(i==7)
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	87 30       	cpi	r24, 0x07	; 7
    1e02:	a9 f4       	brne	.+42     	; 0x1e2e <Read+0x7a>
			{
				Interval = (10*(buffer[5] - '0')) +( buffer[6] - '0');
    1e04:	80 91 e0 01 	lds	r24, 0x01E0
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	c9 01       	movw	r24, r18
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	82 0f       	add	r24, r18
    1e1e:	93 1f       	adc	r25, r19
    1e20:	98 2f       	mov	r25, r24
    1e22:	80 91 e1 01 	lds	r24, 0x01E1
    1e26:	89 0f       	add	r24, r25
    1e28:	80 51       	subi	r24, 0x10	; 16
    1e2a:	80 93 78 01 	sts	0x0178, r24
			}

		}
	}

}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <Check>:
void Check(void*p)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <Check+0x6>
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01

	if(buffer[0] == 'r')
    1e48:	80 91 db 01 	lds	r24, 0x01DB
    1e4c:	82 37       	cpi	r24, 0x72	; 114
    1e4e:	21 f4       	brne	.+8      	; 0x1e58 <Check+0x1e>
	{
		flag = 'r';
    1e50:	82 e7       	ldi	r24, 0x72	; 114
    1e52:	80 93 da 01 	sts	0x01DA, r24
    1e56:	0d c0       	rjmp	.+26     	; 0x1e72 <Check+0x38>
	}else if(buffer[0] == 'g')
    1e58:	80 91 db 01 	lds	r24, 0x01DB
    1e5c:	87 36       	cpi	r24, 0x67	; 103
    1e5e:	21 f4       	brne	.+8      	; 0x1e68 <Check+0x2e>
	{
		flag='g';
    1e60:	87 e6       	ldi	r24, 0x67	; 103
    1e62:	80 93 da 01 	sts	0x01DA, r24
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <Check+0x38>
	}else
	{
		new=1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 ef 01 	sts	0x01EF, r24
		flag=0;
    1e6e:	10 92 da 01 	sts	0x01DA, r1
	}
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <MobileReceive>:
void MobileReceive(void*p)
{
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <MobileReceive+0xa>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	static u8 L_iter;
	if(new)
    1e8e:	80 91 ef 01 	lds	r24, 0x01EF
    1e92:	88 23       	and	r24, r24
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <MobileReceive+0x22>
	{
		new=0;
    1e96:	10 92 ef 01 	sts	0x01EF, r1
		L_iter=0;
    1e9a:	10 92 d9 01 	sts	0x01D9, r1
	}
	if(GET_BIT(UCSRA,7))
    1e9e:	eb e2       	ldi	r30, 0x2B	; 43
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 23       	and	r24, r24
    1ea6:	7c f4       	brge	.+30     	; 0x1ec6 <MobileReceive+0x4a>
	{
		buffer[L_iter] = UART_Receive();
    1ea8:	80 91 d9 01 	lds	r24, 0x01D9
    1eac:	08 2f       	mov	r16, r24
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <UART_Receive>
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	e5 52       	subi	r30, 0x25	; 37
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	80 83       	st	Z, r24
		L_iter++;
    1ebc:	80 91 d9 01 	lds	r24, 0x01D9
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	80 93 d9 01 	sts	0x01D9, r24
	}
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <__mulsi3>:
    1ed4:	62 9f       	mul	r22, r18
    1ed6:	d0 01       	movw	r26, r0
    1ed8:	73 9f       	mul	r23, r19
    1eda:	f0 01       	movw	r30, r0
    1edc:	82 9f       	mul	r24, r18
    1ede:	e0 0d       	add	r30, r0
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	64 9f       	mul	r22, r20
    1ee4:	e0 0d       	add	r30, r0
    1ee6:	f1 1d       	adc	r31, r1
    1ee8:	92 9f       	mul	r25, r18
    1eea:	f0 0d       	add	r31, r0
    1eec:	83 9f       	mul	r24, r19
    1eee:	f0 0d       	add	r31, r0
    1ef0:	74 9f       	mul	r23, r20
    1ef2:	f0 0d       	add	r31, r0
    1ef4:	65 9f       	mul	r22, r21
    1ef6:	f0 0d       	add	r31, r0
    1ef8:	99 27       	eor	r25, r25
    1efa:	72 9f       	mul	r23, r18
    1efc:	b0 0d       	add	r27, r0
    1efe:	e1 1d       	adc	r30, r1
    1f00:	f9 1f       	adc	r31, r25
    1f02:	63 9f       	mul	r22, r19
    1f04:	b0 0d       	add	r27, r0
    1f06:	e1 1d       	adc	r30, r1
    1f08:	f9 1f       	adc	r31, r25
    1f0a:	bd 01       	movw	r22, r26
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	11 24       	eor	r1, r1
    1f10:	08 95       	ret

00001f12 <__udivmodqi4>:
    1f12:	99 1b       	sub	r25, r25
    1f14:	79 e0       	ldi	r23, 0x09	; 9
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <__udivmodqi4_ep>

00001f18 <__udivmodqi4_loop>:
    1f18:	99 1f       	adc	r25, r25
    1f1a:	96 17       	cp	r25, r22
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <__udivmodqi4_ep>
    1f1e:	96 1b       	sub	r25, r22

00001f20 <__udivmodqi4_ep>:
    1f20:	88 1f       	adc	r24, r24
    1f22:	7a 95       	dec	r23
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__udivmodqi4_loop>
    1f26:	80 95       	com	r24
    1f28:	08 95       	ret

00001f2a <__udivmodsi4>:
    1f2a:	a1 e2       	ldi	r26, 0x21	; 33
    1f2c:	1a 2e       	mov	r1, r26
    1f2e:	aa 1b       	sub	r26, r26
    1f30:	bb 1b       	sub	r27, r27
    1f32:	fd 01       	movw	r30, r26
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <__udivmodsi4_ep>

00001f36 <__udivmodsi4_loop>:
    1f36:	aa 1f       	adc	r26, r26
    1f38:	bb 1f       	adc	r27, r27
    1f3a:	ee 1f       	adc	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	a2 17       	cp	r26, r18
    1f40:	b3 07       	cpc	r27, r19
    1f42:	e4 07       	cpc	r30, r20
    1f44:	f5 07       	cpc	r31, r21
    1f46:	20 f0       	brcs	.+8      	; 0x1f50 <__udivmodsi4_ep>
    1f48:	a2 1b       	sub	r26, r18
    1f4a:	b3 0b       	sbc	r27, r19
    1f4c:	e4 0b       	sbc	r30, r20
    1f4e:	f5 0b       	sbc	r31, r21

00001f50 <__udivmodsi4_ep>:
    1f50:	66 1f       	adc	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	1a 94       	dec	r1
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <__udivmodsi4_loop>
    1f5c:	60 95       	com	r22
    1f5e:	70 95       	com	r23
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	bd 01       	movw	r22, r26
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	08 95       	ret

00001f6e <__prologue_saves__>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	ca 1b       	sub	r28, r26
    1f98:	db 0b       	sbc	r29, r27
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	09 94       	ijmp

00001fa6 <__epilogue_restores__>:
    1fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa8:	39 88       	ldd	r3, Y+17	; 0x11
    1faa:	48 88       	ldd	r4, Y+16	; 0x10
    1fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fba:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbc:	df 80       	ldd	r13, Y+7	; 0x07
    1fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fca:	ce 0f       	add	r28, r30
    1fcc:	d1 1d       	adc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	ed 01       	movw	r28, r26
    1fda:	08 95       	ret

00001fdc <strlen>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	01 90       	ld	r0, Z+
    1fe0:	00 20       	and	r0, r0
    1fe2:	e9 f7       	brne	.-6      	; 0x1fde <strlen+0x2>
    1fe4:	80 95       	com	r24
    1fe6:	90 95       	com	r25
    1fe8:	8e 0f       	add	r24, r30
    1fea:	9f 1f       	adc	r25, r31
    1fec:	08 95       	ret

00001fee <strncmp>:
    1fee:	fb 01       	movw	r30, r22
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	41 50       	subi	r20, 0x01	; 1
    1ff4:	50 40       	sbci	r21, 0x00	; 0
    1ff6:	30 f0       	brcs	.+12     	; 0x2004 <strncmp+0x16>
    1ff8:	8d 91       	ld	r24, X+
    1ffa:	01 90       	ld	r0, Z+
    1ffc:	80 19       	sub	r24, r0
    1ffe:	19 f4       	brne	.+6      	; 0x2006 <strncmp+0x18>
    2000:	00 20       	and	r0, r0
    2002:	b9 f7       	brne	.-18     	; 0x1ff2 <strncmp+0x4>
    2004:	88 1b       	sub	r24, r24
    2006:	99 0b       	sbc	r25, r25
    2008:	08 95       	ret

0000200a <_exit>:
    200a:	f8 94       	cli

0000200c <__stop_program>:
    200c:	ff cf       	rjmp	.-2      	; 0x200c <__stop_program>
